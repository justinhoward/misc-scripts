#!/usr/bin/env bash
set -o noglob

usage() {
  summary
  echo 1>&2 && arguments
  [ -n "$1" ] && echo 1>&2 && examples
}

summary() {
  cat >&2 <<EOF
Usage: $(color 2 "$(basename "$0")") [OPTIONS] [NAME...]
Systems Manager Connect

Connect to an EC2 instance via AWS SSM session manager
EOF
}

arguments() {
  cat >&2 <<EOF
$(color 3 NAME)
A word to search for in the EC2 instance Name tag. If multiple are given, they
will be ANDed together.

$(color 3 OPTIONS)
All long (--option) options require GNU getopt to be in your path. On OS X,
install the gnu-getopt package and follow the instructions to add it to your
path for your shell.

$(color 2 "-c|--columns") COLUMNS          A comma-separated list of columns to display.
                              Defaults to "name". See "ec2-search -h" for more info.
$(color 2 "-f|--filters") FILTERS          A filter for the native aws ec2 command.
                                The format is "Name=<filter>,Values=<value>,<value>"
                                Allows multiple instances of -f.
                                See "aws ec2 describe-instances help" for a full list.
$(color 2 "-F|--port-forward") LP:RH:RP    Enable port forwarding with format:
                                           local-port:remote-host:remote-port
$(color 2 "-h|--help")                     Show this help message
$(color 2 "-i|--instance-id") INSTANCE_ID  Connect to INSTANCE_ID directly
$(color 2 "-l|--list")                     Force printing the list even for only 1 option
$(color 2 "-n|--dry-run")                  Print the matching instance ID instead of connecting
$(color 2 "-p|--profile") PROFILE          An AWS CLI profile. Allows multiple.
$(color 2 "-r|--region") REGION            An AWS region. Allows multiple.
$(color 2 "-R|--all-regions")              All regions - Search all AWS regions
$(color 2 "-s|--select")                   Select a number without showing the list
$(color 2 "-t|--tags") NAME=VAL            Tag to search for. Multiples can be specified and will be
                                ANDed together.
$(color 2 "-v|--verbose")                  Print verbose messaging
EOF
}

examples() {
  cat >&2 <<EOF
$(color 3 EXAMPLES)
$(color 4 No Selection if Single Choice)
\$ ssmc production web
Starting session with SessionId: justin-0746d171d9f3869c1
sh-4.2\$

$(color 4 Multiple Choices)
\$ ssmc web
1) production-web
2) staging-web
> 2
Starting session with SessionId: justin-0746d171d9f3869c1
sh-4.2\$

$(color 4 Specifying Columns)
\$ ssmc web -c'name,launch-time'
1) production-web 2022-11-23T10:30:19+00:00
2) sandbox-web 2022-11-23T15:39:39+00:00
3) staging-web 2022-11-23T17:02:33+00:00
4) production-web 2022-11-23T19:41:10+00:00

$(color 4 Filtering by Tags)
\$ ssmc web -t Environment=production
1) production-web
2) production-web
EOF
}

msg() {
  printf '%s\n' "$*" >&2
}

error() {
  tput setaf 1
  msg "$@"
  tput sgr0
}

verbose() {
  [ -n "$verbose" ] && msg "$@"
}

error_exit() {
  error "$@"
  exit 1
}

usage_error() {
  [ "$#" -gt 0 ] && error "$@" $'\n'
  usage
  exit 1
}

getopt_error() {
  usage_error "$(echo "$1" | sed -n 's/.*: //1p')"
}

color() {
  tput setaf "$1"
  echo -n "${@:2}"
  tput sgr0
}

print_run() {
  verbose "$@"
  "$@"
}

shortopts='c:f:F:hi:lnp:r:Rs:t:v'
longopts='columns:,filters:,port-forward:,help,instance-id:,list,dry-run,profile:,region:,all-regions,select:,tags:,verbose'

if ! getopt -T > /dev/null; then
  options="$(getopt \
    --options "$shortopts" \
    --long "$longopts" \
    -n "$(basename "$0")" \
    -- "$@" \
  2>&1)" || getopt_error "$options"
else
  options="$(getopt \
    "$shortopts" \
    "$@" \
  2>&1)" || getopt_error "$options"
fi

eval set -- "$options"

while true; do
  case "$1" in
    -c|--columns) columns="$2"; shift 2 ;;
    -f|--filters) filters+=("$2"); shift 2 ;;
    -F|--port-forward) port_forward="$2"; shift 2 ;;
    -h|--help) usage 1 && exit ;;
    -i|--instance-id) provided_instance_id="$2"; shift 2 ;;
    -l|--list) list=1; shift ;;
    -n|--dry-run) dry_run=1; shift ;;
    -p|--profile) profiles+=("$2"); shift 2 ;;
    -r|--region) regions+=("$2"); shift 2 ;;
    -R|--all-regions) all_regions=1; shift ;;
    -s|--select) choose="$2"; shift 2 ;;
    -t|--tags) tags+=("$2"); shift 2 ;;
    -v|--verbose) verbose=1; shift ;;
    --) shift; break ;;
  esac
done

if ! command -v aws >/dev/null; then
  error_exit 'The aws CLI is required'
fi

if ! command -v ec2-search >/dev/null; then
  error_exit 'The ec2-search is required'
fi

if ! command -v session-manager-plugin >/dev/null; then
  error 'The AWS session-manager-plugin is required'
  error_exit 'https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html'
fi

if [ -n "$port_forward" ]; then
  if ! [[ "$port_forward" =~ ^[0-9]+:[^:]+:[0-9]+$ ]]; then
    error_exit "Invalid port forward argument ${port_forward}"
  fi

  IFS=':' read -r local_port remote_host remote_port <<< "$port_forward"
fi

[ -z "$columns" ] && columns=name
search_cmd=(
  ec2-search -ao tsv
  -c "instance-id,profile,region,$columns"
)
for filter in "${filters[@]}"; do
  search_cmd+=(-f "$filter")
done
for profile in "${profiles[@]}"; do
  search_cmd+=(-p "$profile")
done
for region in "${regions[@]}"; do
  search_cmd+=(-r "$region")
done
for tag in "${tags[@]}"; do
  search_cmd+=(-t "$tag")
done
[ -n "$provided_instance_id" ] && search_cmd+=(-f "instance-id=$provided_instance_id")
[ -n "$all_regions" ] && search_cmd+=(-R)
[ -n "$verbose" ] && search_cmd+=(-v)
search_cmd+=("$@")

while read -r line; do
  results+=("$line")
done < <(print_run "${search_cmd[@]}")

if [ "${#results[@]}" -eq 0 ]; then
  error_exit "No instances found"
elif [ "${#results[@]}" -eq 1 ] && [ -z "$list" ]; then
  chosen="${results[0]}"
else
  if [ -z "$choose" ]; then
    number=1
    for result in "${results[@]}"; do
      parts=()
      while IFS='' read -r part; do
        parts+=("$part");
      done < <(echo "$result" | tr $'\t' $'\n')
      echo "$(color 4 "${number}")) ${parts[*]:3}" >&2
      number=$((number + 1))
    done

    echo -n "$(color 2 '> ')" >&2
    read -r choose
  fi

  if [ -z "$choose" ]; then
    exit
  fi

  if ! [[ "$choose" =~ ^[0-9]+$ ]]; then
    error_exit "Invalid choice ${choose}"
  fi

  if [ "$choose" -lt 1 ] || [ "$choose" -gt "${#results[@]}" ]; then
    error_exit "Choice ${choose} out of range"
  fi

  chosen="${results[(($choose - 1))]}"
fi

chosen_parts=()
while IFS='' read -r part; do
  chosen_parts+=("$part");
done < <(echo "$chosen" | tr $'\t' $'\n')
instance_id="${chosen_parts[0]}"
profile="${chosen_parts[1]}"
region="${chosen_parts[2]}"

if [ -n "$dry_run" ]; then
  echo "$instance_id"
  exit
fi

session_cmd=(aws ssm start-session --target "$instance_id")
[ -n "$profile" ] && session_cmd+=(--profile "$profile")
[ -n "$region" ] && session_cmd+=(--region "$region")
[ -n "$local_port" ] && session_cmd+=(
  --document-name "AWS-StartPortForwardingSessionToRemoteHost"
  --parameters "{\"portNumber\":[\"$remote_port\"], \"localPortNumber\":[\"$local_port\"], \"host\":[\"$remote_host\"]}"
)

msg "Connecting to $(color 2 "${chosen_parts[*]:3}") ($(color 4 "${instance_id}") in $(color 4 "${region}"))" ''
verbose "${session_cmd[@]}"
exec "${session_cmd[@]}"
